---
title: "Northampton Tree Planting and Removal 2015-2022"
author: "Kent S Johnson"
toc: true
callout-icon: false
format:
  html:
    embed-resources: true
    header-includes: '<link rel="icon" type="image/png" href="icons8-oak-tree-48.png">'
execute:
  echo: false
  message: false
  warning: false
---

<style>
table.gt_table {
    color: var(--quarto-body-color);
    font-size: 14px;
}
</style>

```{r libraries, include=FALSE}
library(tidyverse)
library(gt)
library(leaflet)
library(lubridate)
library(scales)
library(sf)

source(here::here('Trees/Read_and_clean_planting.R'))
```

```{r chart_setup}
source_text = 'Data: Northampton Tree Warden | Analysis: Kent S Johnson'

# First two colors of RColorBrewer::brewer.pal(3, 'Dark2')
survival_colors = values=c(Removed='#D95F02', Remaining='#1B9E77')

#other_colors = rcartocolor::carto_pal(n=10, 'Prism')
#other_colors = RColorBrewer::brewer.pal(n=10, 'Set3')

theme_set(theme_minimal(base_size=12) + theme(legend.position='bottom'))

tree_table_options = function(table, has_total_row=FALSE) {
  table = table %>% 
    tab_source_note(source_text) %>%
    opt_row_striping()
  
  if (has_total_row) {
    table = table %>% 
      tab_style(locations=cells_body(rows=Year %in% c('Percent')), 
                style=list(cell_text(weight='bold'))) |> 
      tab_style(locations=cells_body(rows=Year %in% c('Total')), 
                style=list(cell_text(weight='bold'), 
                           cell_borders(sides='top', weight=px(2))))
  }
  table
}
```
## Introduction

This report summarizes tree plantings and subsequent removals for the 
City of Northampton 
in the years 2015 to 2022.

The analysis is based on tree data from the City Tree Warden.

## Summary

In this period, `r comma(nrow(planted))` trees were planted. 
Of these, `r comma(sum(!planted$dead))` (`r int_pct(mean(!planted$dead))`) 
have survived to date and 
`r sum(planted$dead)` (`r int_pct(mean(planted$dead))`) have been removed.

## Yearly planting and removal

This table and chart show planting and removals by planting year.
They count removals against the planting year;
the removal numbers
for recent years may increase over time as more trees are removed.

```{r yearly_planting}
planting_data = planted %>% 
  group_by(Year) %>% 
  summarize(Total=n(),
            Removed_Count = sum(dead),
            Remaining_Count = sum(!dead))

planting_data %>% 
  mutate(Year=as.character(Year)) %>% 
  add_row(Year='Total', 
          Total=sum(.$Total),
          Removed_Count=sum(.$Removed_Count), 
          Remaining_Count=sum(.$Remaining_Count)
          ) %>% 
  #mutate(`Remaining_Pct` = int_pct(Remaining_Count/Total), .after=3) %>% 
  mutate(`Removed_Pct`=int_pct(Removed_Count/Total), .after=2) %>% 
  gt() %>% 
  tab_spanner_delim('_') %>% 
  tab_header(title='Trees planted and subsequently removed 2015-2022') %>% 
  tree_table_options(has_total_row=TRUE)

planting_data %>% 
  select(Year, Remaining=Remaining_Count, Removed=Removed_Count) %>% 
  pivot_longer(cols=c(Remaining, Removed)) %>% 
ggplot(aes(Year, value, fill=name)) +
  geom_col(position='stack') +
  scale_y_continuous(minor_breaks=NULL) +
  scale_fill_manual('', values=survival_colors) +
  labs(title='Trees planted and subsequently removed 2015-2022',
       y='Number of trees planted',
       caption=source_text)
```

## Top species planted

```{r yearly_species}
top_x_counts = function(col) {
  top_x = planted %>% 
    count({{col}}, sort=TRUE) %>% 
    pull({{col}}) %>% head(10)
  
  x_data = planted %>% 
    filter({{col}} %in% top_x)
  
  x_counts = x_data %>% 
    group_by(Year) %>% 
    count({{col}}, sort=TRUE) %>% 
    ungroup() %>% 
    pivot_wider(names_from={{col}}, values_from='n', values_fill=list(n=0)) %>% 
    select(Year, all_of(top_x)) %>% 
    arrange(Year) %>% 
    mutate(Year=as.character(Year))
  
  x_counts
}

top_x_table = function(x_counts, col_name) {
  x_total = x_counts |> 
    summarize(across(-Year, sum)) %>% 
    mutate(Year='Total', .before=1)
  
  x_percent = x_total |> 
    mutate(across(-Year, ~int_pct(.x/nrow(planted)))) |> 
    mutate(Year='Percent', .before=1)
  
  x_counts %>% 
    mutate(across(everything(), as.character)) |> 
    bind_rows(x_total |> 
                mutate(across(everything(), as.character)),
                x_percent) %>% 
    gt() %>% 
    tab_header(title=str_glue('Tree {col_name} planted 2015-2022'),
               subtitle=str_glue('Top ten {col_name} overall')) %>% 
    tree_table_options(has_total_row=TRUE)
}

top_x_chart = function(counts, col_name) {
  # Compute the position of labels
  totals <- counts |> 
    summarize(across(-Year, sum))

  data = tibble(name=factor(names(totals), levels=names(totals)), 
                value=as.numeric(totals[1,])) %>%
    mutate(prop = value / sum(value) *100) %>%
    mutate(ypos = cumsum(prop)- 0.5*prop )

  ggplot(data, aes(x="", y=prop, fill=name)) +
    geom_col(position='stack', width=1, color="white") +
    coord_polar("y", start=0, direction=-1) +
    theme_void() + 
    #theme(legend.position="none") +
    # geom_text(aes(y = 100-ypos, label = name, x=1.3), 
    #           color = "black", size=4) +
    #rcartocolor::scale_fill_carto_d(palette="Pastel") +
    scale_fill_brewer(str_to_sentence(col_name), palette="Paired") +
    labs(title=str_glue('Tree {col_name} planted 2015-2022'),
         subtitle=str_glue('Top ten {col_name} overall'),
         caption=source_text)
}

counts = top_x_counts(Species)
top_x_table(counts, 'species')
top_x_chart(counts, 'species')
```

## Survival by species

```{r survival}
top_species = planted %>% 
  count(Species, sort=TRUE) %>% 
  pull(Species) %>% head(10)

survival = planted |> 
  filter(Species %in% top_species) |> 
  group_by(Species) |> 
  summarize(Total=n(),
            Removed_Pct=int_pct(mean(dead)), 
            Removed_Count=sum(dead),
            pct = mean(!dead),
            Remaining_Pct=int_pct(pct),
            Remaining_Count=sum(!dead)) |> 
  arrange(desc(pct)) |> 
  select(-pct)

gt(survival) %>% 
  tab_header(title=str_glue('Species planted and survived 2015-2022'),
             subtitle=str_glue('Top ten species overall')) %>% 
  tab_spanner_delim('_', columns=3:6) |> 
  tree_table_options()

survival |> 
  select(Species, Remaining=Remaining_Count, Removed=Removed_Count) |> 
  mutate(Species=factor(Species, levels=Species)) |> 
  pivot_longer(cols=Remaining:Removed) |> 
  ggplot(aes(Species, value, fill=name)) +
    geom_col() +
    scale_fill_manual('', values = survival_colors) +
    labs(title='Top species planted and subsequently removed 2015-2022',
         y='Number of trees planted',
         caption=source_text)
```

## Top genera planted

```{r yearly_genera}
counts = top_x_counts(Genus)
top_x_table(counts, 'genera')
top_x_chart(counts, 'genera')
```

## Top families planted

```{r yearly_families}
counts = top_x_counts(Family)
names(counts) = str_to_sentence(names(counts))
top_x_table(counts, 'families')
top_x_chart(counts, 'families')
```

## Planting by ward

This table summarizes the number of trees planted by ward.

```{r by_ward}
by_ward = planted |> 
  count(Year, Ward) |> 
  pivot_wider(names_from='Ward', values_from='n', values_fill=0) |> 
  rename(Unknown=`NA`) |> 
  mutate(Year=as.character(Year))

by_ward |> 
  bind_rows(summarize(by_ward, across(-Year, sum)) |> 
              mutate(Year='Total')) |> 
  gt() |> 
  tab_spanner('Ward', 2:9) |> 
  tab_header(title='Trees planted by ward') |> 
  tree_table_options(has_total_row=TRUE)
```

## Planting in Environmental Justice communities

```{r ej}
ej = read_sf('~/Dev/ej2020/ej2020_gdb.zip') |> 
  filter(MUNICIPALITY=='Northampton') |> 
  st_transform(crs=4326)

ej_locations = planting_locations[ej,] |> 
  st_drop_geometry()

ej_planting = planted |> 
  filter(!dead) |> 
  inner_join(ej_locations) |> 
  count(Year, name='Count') |> 
  mutate(Year=as.character(Year))
```

Northampton includes seven 2020 Census block groups which are
classified as Environmental Justice populations -
four with substantial minority populations and
three with both minority and low-income populations.

This table shows the number of trees planted each year in Environmental
Justice communities of Northampton.

```{r ej_table}
ej_planting |> 
  bind_rows(tibble(Year='Total', Count=sum(ej_planting$Count))) |> 
  gt() |> 
  tab_header(title='Trees planted in Environmental Justice communities') |> 
  tree_table_options(has_total_row=TRUE)
```

## Planting in special projects

Some trees have been planted as part of dedicated projects such as
Arbor Week and neighborhood plantings. This table summarizes special project
plantings.

```{r projects}
project_planting = planted |> 
  filter(!is.na(`Planting Project`)) |> 
  count(Year, `Planting Project`) |>
  mutate(`Planting Project`=
           case_match(`Planting Project`,
                      'ARBOR WK' ~ 'Arbor Week',
                      'CDH' ~ 'Cooley Dickenson Hosp.',
                      'NBHD' ~ 'Neighborhood',
                      .default = str_to_title(`Planting Project`))) |> 
  pivot_wider(names_from='Planting Project', values_from='n') |> 
  mutate(Year=as.character(Year))

project_planting |> 
  bind_rows(summarize(project_planting, across(-Year, \(x) sum(x, na.rm = TRUE))) |> 
              mutate(Year='Total')) |> 
  gt() |> 
  tab_header(title='Trees planted in special projects') |> 
  sub_missing(missing_text='-') |> 
  tree_table_options(has_total_row=TRUE)
```

## Planting location description

The trees planted are predominantly in the tree belt and right-of-way
(`r int_pct(mean(planted$Location %in% c('TREE BELT', 'RIGHT OF WAY'), na.rm=TRUE))`)
and set back
(`r int_pct(mean(planted$Location %in% c('SET BACK', 'SET BACK WITH AGREEMENT'), na.rm=TRUE))`) with 12% in other locations.

```{r yearly_location}
location_data = planted %>% 
  mutate(Location = if_else(is.na(Location), 'Unknown', Location)) |> 
  group_by(Year) %>% 
  count(Location) %>% 
  arrange(Year, desc(n)) %>% 
  ungroup() %>% 
  mutate(Location=str_to_sentence(Location)) |> 
  pivot_wider(names_from='Location', values_from='n', values_fill=list(n=0)) %>% 
  select(Year=Year, everything())

location_totals = location_data |> 
  summarize(across(-Year, sum)) %>% 
  mutate(Year='Total', .before=1)
column_order = c(1, 
                 1+order(as.numeric(location_totals[1,-1]), decreasing=TRUE))

location_data %>% 
  mutate(Year=as.character(Year)) %>% 
  bind_rows(location_totals) %>% 
  select(all_of(column_order)) |> 
  gt() %>% 
  tab_header(title='Planting locations 2015-2022') %>% 
  tree_table_options(has_total_row=TRUE)

location_data %>% 
  pivot_longer(cols=-1) %>% 
ggplot(aes(Year, value, fill=name)) +
  geom_col(position='stack') +
  scale_y_continuous(minor_breaks=NULL) +
  #rcartocolor::scale_fill_carto_d('', palette='Pastel', direction=-1) +
  scale_fill_brewer(palette="Paired") +
  labs(y='Number of trees planted',
       caption=source_text)
```

## Planting map

This map shows the approximate locations of the `r comma(sum(!planted$dead))`
surviving trees. Overlays show Northampton wards and Environmental Justice (EJ)
communities.

Mouse-over trees for additional information.

:::{.column-page}

```{r map}
wards = read_sf(here::here('Shapefiles/vote_ward_precinct_2010_20190916/vote_ward_precinct_2010_20190916.shp')) |> 
  mutate(ward=str_sub(WARD, 1, 1)) |> 
  group_by(ward) |> 
  summarize() |> 
  st_transform(4326)

ward_palette = colorFactor(RColorBrewer::brewer.pal(7, 'Pastel1'), wards$ward)

leaflet(width='900px', height='800px') |> 
  setView(-72.667, 42.330, 12) |> 
  addProviderTiles('CartoDB.Positron', group='Street') |> 
  addProviderTiles('Esri.WorldImagery', group='Satellite') |> 
  addPolygons(data=ej, weight=1, fillOpacity=0.1, color='black',
              group='EJ') |> 
  addPolygons(data=wards, label=~paste('Ward', ward), group='Wards',
              weight=1, fillOpacity=0.2, fillColor=~ward_palette(ward)) |> 
  addCircleMarkers(data=map_data, radius=~5+sqrt(count), label=~label,
                   group='Trees',
                   stroke=FALSE, fillColor="#1B9E77", fillOpacity=0.5) |> 
  addLayersControl(baseGroups=c('Street', 'Satellite'),
    overlayGroups=c('Trees', 'Wards', 'EJ'),
    options=layersControlOptions(collapsed=FALSE)) |> 
  hideGroup('EJ')

```

:::