---
title: "Northampton Priority Tree Planting 2015-2022"
author: "Kent S Johnson"
toc: true
callout-icon: false
format:
  html:
    embed-resources: true
    header-includes: '<link rel="icon" type="image/png" href="icons8-oak-tree-48.png">'
execute:
  echo: false
  message: false
  warning: false
---

<style>
table.gt_table {
    color: var(--quarto-body-color);
    font-size: 14px;
    width: auto;
}
</style>

```{r libraries, include=FALSE}
library(tidyverse)
library(googlesheets4)
library(gt)
library(leaflet)
library(lubridate)
library(scales)
library(sf)
```

```{r data, cache=TRUE}
source(here::here('Trees/Read_and_clean_planting.R'))
```

```{r setup}
source_text = 'Data: Northampton Tree Warden | Analysis: Kent S Johnson'

# First two colors of RColorBrewer::brewer.pal(3, 'Dark2')
survival_colors = values=c(Removed='#D95F02', Remaining='#1B9E77')

#other_colors = rcartocolor::carto_pal(n=10, 'Prism')
#other_colors = RColorBrewer::brewer.pal(n=10, 'Set3')

theme_set(theme_minimal(base_size=12) + theme(legend.position='bottom'))

tree_table_options = function(table, has_total_row=FALSE) {
  table = table %>% 
    tab_source_note(source_text) %>%
    opt_row_striping()
  
  if (has_total_row) {
    table = table %>% 
      tab_style(locations=cells_body(rows=Neighborhood %in% c('Total')), 
                style=list(cell_text(weight='bold'), 
                           cell_borders(sides='top', weight=px(2))))
  }
  table
}

make_map = function(trees, overlay=NULL, overlay_labels=NULL, overlay_name='') {
  bbox = unname(st_bbox(trees))
  map = leaflet(width='800px', height='700px') |> 
    fitBounds(bbox[1], bbox[2], bbox[3], bbox[4]) |> 
    addProviderTiles('CartoDB.Positron', group='Street') |> 
    addProviderTiles('Esri.WorldImagery', group='Satellite')
  
  overlay_groups = 'Trees'
  if (!is.null(overlay)) {
    if (any(str_detect(class(st_geometry(overlay)), 'POLYGON'))) {
    map = map |> 
      addPolygons(data=overlay, weight=1, fillOpacity=0.1, color='black',
                  label=overlay_labels, group=overlay_name)
    } else if (any(str_detect(class(st_geometry(overlay)), 'LINESTRING'))) {
    map = map |> 
      addPolylines(data=overlay, weight=1, fillOpacity=0.1, color='black',
                  label=overlay_labels, group=overlay_name)
    }
    overlay_groups = c(overlay_groups, overlay_name)
  }
  
  map |> 
    addCircleMarkers(data=trees, radius=~5+sqrt(count), label=~label,
                     group='Trees',
                     stroke=FALSE, fillColor="#1B9E77", fillOpacity=0.5) |> 
    addLayersControl(baseGroups=c('Street', 'Satellite'),
      overlayGroups=overlay_groups,
      options=layersControlOptions(collapsed=FALSE))
}
```

```{r streets}
# Streets from OpenStreetMap
# Overpass Turbo query:
# [bbox: 42.28414,-72.74122,42.37524,-72.58421];
# (way
#   [highway=primary];
# way
#   [highway=secondary];
# way
#   [highway=tertiary];
# way
#   [highway=residential];
#  );
# 
# /*added by auto repair*/
# (._;>;);
# /*end of auto repair*/
# out;

noho = read_sf(here::here('Shapefiles/Noho_outline/Noho_outline.gpkg'))
osm_roads = read_sf(here::here('Shapefiles/Roads.geojson'))
osm_roads = osm_roads[noho |> st_transform(st_crs(osm_roads)),]

# Convert street names as listed in map_data to the format that OpenStreetMap
# uses so we can look them up in osm_roads
names_to_osm = function(streets) {
  streets |> 
    str_to_title() |> 
    str_replace_all(c(
      ' Ave$' = ' Avenue',
      ' Cir$' = ' Circle',
      ' Dr$' = ' Drive',
      ' Rd$' = ' Road',
      ' St$' = ' Street',
      ' St, Florence$' = ' Street',
      ' Terr$' = ' Terrace',
      "O'donnell Dr" = "O'Donnell Dr"
    ))
}
```

## Introduction

The Northampton Committee on Public Planting has identified numerous
priority regions for new plantings. This report summarizes 2015-2022 planting in
many of the priority regions.

The tree locations in this analysis are approximate, derived by
geocoding the tree addresses. This locates most trees on the building at the
tree address, rather than in the correct location - typically on the 
right-of-way.

## Proximity to downtown centers

```{r downtown}
qmile_raw = read_sheet(
  'https://docs.google.com/spreadsheets/d/1BPOBrVKXX7ROS-gORve0q3MeRDxBtJ7s4KPwdU4Kl4I/edit#gid=0',
  sheet=1, skip=1,
  col_types='c'
)

qmile_goals = qmile_raw |> 
  filter(`Ownership:         R/S/?/B/C`=='R') |> # Right-of-way only per Molly
  mutate(Count=parse_number(replace_na(`Number of  Trees`, '1'))) |> 
  summarize(.by=Sector, Sites=sum(Count)) |> 
  mutate(Neighborhood=case_match(str_sub(Sector, 1, 1),
                           'F' ~ 'Florence',
                           'N' ~ 'Northampton',
                           'L' ~ 'Leeds'))

centers = read_sf(here::here('Shapefiles/CityCenters.gpkg'), layer='CityCenterPolys') |> 
  st_make_valid() |> 
  st_transform(4326) |> 
  mutate(Neighborhood=factor(City), 
         Sector=factor(Code))

center_trees = st_join(map_data, centers, left=FALSE)
qmile_actual = center_trees |> 
  st_drop_geometry() |> 
  summarize(.by=c(Neighborhood, Sector), Planted=sum(count))

center_summary = qmile_goals |> 
  left_join(qmile_actual) |> 
  mutate(Planted=replace_na(Planted, 0)) |> 
  arrange(desc(Neighborhood), Sector)
```

The Committee on Public Planting has identified
`r sum(qmile_goals$Sites)` possible planting locations in the public 
right-of-way near
the Northampton, Florence and Leeds city centers. To date,
`r sum(qmile_actual$Planted)` trees have been planted in these regions.

The downtown areas were further divided into 4-5 sectors. This table
summarizes the planting per sector; the map shows the trees planted
in each sector.

```{r downtown_table}
center_summary |> 
  select(Neighborhood, Sector, Sites, Planted) |> 
  gt(rowname_col='Sector', groupname_col='Neighborhood') |> 
  summary_rows(groups=TRUE, columns=c(Sites, Planted), 
               fns=list(Total=~sum(.)), decimals=0) |> 
  grand_summary_rows(columns=c(Sites, Planted), 
               fns=list(Total=~sum(.)), decimals=0) |> 
  tab_header(title='Downtown trees planted 2015-2022') |> 
  tab_source_note(source_text)
```


```{r downtown-map}
make_map(center_trees, centers, centers$Sector, 'City centers')
```

## Main arteries through town

```{r arteries}
arteries = c('PLEASANT STREET', 'KING ST', 'BRIDGE ST', 'ELM ST', 'LOCUST ST',
             'MAIN ST, FLORENCE', 'NORTH MAIN ST', 'CONZ ST', 'OLD SOUTH ST',
             'WEST ST', 'PRINCE ST', 'CHAPEL ST', 'WESTHAMPTON RD',
             'BRIDGE RD', 'DAMON RD', 'HATFIELD ST', 'NONOTUCK ST', 'ELM ST',
             'BARRETT ST', 'DAY AVE', 'RYAN RD', 'ROCKY HILL RD')

artery_trees = map_data |> 
  filter(Street %in% arteries)

artery_names = arteries |> sort() |> str_to_title()
osm_artery_names = names_to_osm(artery_names)
osm_artery_roads = osm_roads |> filter(name %in% osm_artery_names)
```

`r sum(artery_trees$count)` trees have been planted on main arteries
throughout Northampton including
`r str_flatten_comma(artery_names, ', and ')`.

```{r arteries_map}
# Any missing?
#setdiff(osm_artery_names, osm_artery_roads$name)

make_map(artery_trees, osm_artery_roads, osm_artery_roads$name, 'Arteries')
```

## City parking lots

I don't have good enough information about 
the actual tree locations to sort this out.

```{r parking, eval=FALSE}
# From Overpass Turbo query https://overpass-turbo.eu/
# way
#   [amenity=parking]
#   ({{bbox}});
# (._;>;);
# out;

lots = read_sf(here::here('Shapefiles/parking_lots.geojson')) |> 
  filter(str_starts(id, 'way/'))

lot_names = c('Hampton Avenue Lot', "Round House Lot", "Armory Street Lot",
              "James House Lot", "Masonic Street Lot", "Strong Avenue Lot"
              )

named_lots = lots |> filter(name %in% lot_names)

ways = tribble(
  ~name, ~way,
  "Mulino's Lot", '157013633',
  "Old Honda Dealership", '113730321',
  'WEBS', '205658296',
  'Public Health Department', '205658295',
  'Merrick Lane', '152097595'
  ) |> 
  mutate(way=paste0('way/', way))

ways_lots = left_join(ways, lots,
                      by=c(way='@id'), suffix=c('', '.lots')) |> 
  select(-name.lots)

map_lots = bind_rows(named_lots, ways_lots)
#map_lots = lots
buffered_lots = map_lots |> 
  st_transform(26986) |>
  st_buffer(10) |> 
  st_transform(4326)
lot_trees = map_data[buffered_lots,]
```

```{r lot_map, eval=FALSE}
make_map(lot_trees, map_lots, overlay_labels=NULL, 'Parking lots')

```

## Proximity to low-income neighborhoods

?? How to define proximity? I've used actual address.
Where is Leeds apt bldg? Include
Market St. area?, Hawley St.?,  Fruit St. Apts? If so need definition. 

```{r low-income}
# Some guesses
# Specific buildings
low_income_bldg = tribble(
  ~address, ~Location, 
  '80 Damon Rd', 'River Run Apts',
  '241 Jackson St', 'Hampshire Heights',
  '178 Florence Rd', 'Florence Heights',
  '491 Bridge Rd', 'Meadowbrook Apts',
  '81 Conz St', 'Salvo House',
  '49 Old South St', 'MacDonald House',
  #'??', 'Leeds Apt',
  '91 Grove St', 'Grove Street Inn'
)

low_income_trees = low_income_bldg |> 
  left_join(map_data) |> 
  st_as_sf()
```

Several low-income areas have been identified for planting including
`r low_income_bldg$Location |> sort() |> str_flatten_comma(', and ')`

These areas have had trees planted:

```{r low-income-table}
low_income_trees |> 
  st_drop_geometry() |> 
  filter(!is.na(count)) |> 
  summarize(.by=Location, Count=sum(count)) |> 
  gt() |> 
  tab_header(title='Trees planted in low-income areas') |> 
  tab_source_note(source_text)
```

## Heavily trafficked secondary streets

```{r secondary}
secondary_streets = c(
  # Florence
  'BRIDGE RD', 'OAK ST', 'RYAN RD', 'BURTS PIT RD', 'NONOTUCK ST', 'PARK ST', 
  'PINE ST', 'MEADOW ST', 'CLEMENT ST', 'RIVERSIDE DR', 'MAPLE ST', 
  'NORTH MAPLE ST', 'CHESTNUT ST', 'SPRING ST', 'RESERVOIR RD', 
  'FLORENCE RD', 'FEDERAL ST', 'BLISS ST', 'INDUSTRIAL DR', 
  
  # NORTHAMPTON: 
  'PROSPECT ST', 'FINN ST', 'JACKSON ST', 'MASSASOIT ST', 'WOODLAWN AVE', 
  'STATE ST', 'BARRETT ST', 'MARKET ST', 'NORTH ST', 'DAY AVE', 
  'INDUSTRIAL DR', 'COOKE AVE', 'CENTER ST', 
  
  #LEEDS:  
  'FLORENCE ST', 'MAIN ST', 'MULBERRY ST', 'DIMOCK ST', 'FRONT ST')

secondary_trees = map_data |> 
  filter(Street %in% secondary_streets)
```

`r sum(secondary_trees$count)` trees have been planted on heavily-trafficked
secondary streets throughout Northampton.

```{r secondary_map}
osm_secondary_names = names_to_osm(secondary_streets)
osm_secondary_roads = osm_roads |> filter(name %in% osm_secondary_names)

# Any missing?
# setdiff(osm_secondary_names, osm_roads$name)

make_map(secondary_trees, osm_secondary_roads, osm_secondary_roads$name, 
         'Secondary streets')
```

## Neighborhoods with sparse tree cover

```{r sparse}
sparse_streets = c(
  'EARLE ST', 'LAUREL ST', 'CHAPEL ST', 'ROCKY HILL RD', 
  'GOTHIC ST', 'CENTER ST', 'MASONIC ST', 'KING ST', 
  'BROOKSIDE CIR', 'OVERLOOK DR', 'LONGVIEW DR', 'BURTS PIT RD', 
  'WESTWOOD TERR', 'DREWSEN DR', 'CAHILLANE TERR', 'FOREST GLEN DR', 
  'O\'DONNELL DR', 'WINCHESTER TERR', 'REDFORD DR', 'DEERFIELD DR', 
  'ACREBROOK DR', 'AUSTIN CIR', 'BRIERWOOD DR', 'ACREBROOK DR', 
  'TARA CIRCLE', 'GOLDEN DR', 'SPRUCE HILL AVE', 'HICKORY DR', 'BIRCH HILL RD'
)

sparse_trees = map_data |> 
  filter(Street %in% sparse_streets)
```

`r sum(sparse_trees$count)` trees have been planted in neighborhoods
identified as having sparse tree cover.

```{r sparse_map}
osm_sparse_names = names_to_osm(sparse_streets)
osm_sparse_roads = osm_roads |> filter(name %in% osm_sparse_names)
# setdiff(osm_sparse_names, osm_sparse_roads$name)

make_map(sparse_trees, osm_sparse_roads, osm_sparse_roads$name, 'Sparse cover')
```

## Businesses with possible planting sites


```{r businesses}
businesses = tribble(
  ~name, ~address,
  'Spare Time', '525 Pleasant St',
  'Daily Hampshire Gazette', '115 Conz St',
  'Cooley Dickenson Hospital', '30 Locust St',
  'Kollmorgen', '50 Prince St',
  'St. Elizabeth Ann Church', '99 King St',
  'Northampton Tire', '182 King St',
  'Acme Automotive', '220 King St',
  '200 King St', '200 King St',
  '206 King St', '206 King St',
  'Bluebonnet Diner', '324 King St',
  'NAPA Auto Parts', '348 King St',
  'Woodward & Grinnell', '8 North King St',
  'Enterprise Car Rentals', '24 North King St',
  'Big Y', '136 North King St',
  'Cooke Ave. Apts', '328 Hatfield St'
)

business_trees = businesses |> 
  left_join(map_data) |> 
  st_as_sf()
```

Several businesses have been identified as having possible planting sites
including
`r businesses$name |> sort() |> str_flatten_comma(', and ')`

These businesses have had trees planted:

```{r business-table}
business_trees |> 
  st_drop_geometry() |> 
  filter(!is.na(count)) |> 
  summarize(.by=name, Count=sum(count)) |> 
  rename(Location=name) |> 
  gt() |> 
  tab_header(title='Trees planted at businesses') |> 
  tab_source_note(source_text)
```
